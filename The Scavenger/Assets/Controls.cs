//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Scavenger
{
    public partial class @Controls: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @Controls()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""GridMap"",
            ""id"": ""35f5c2a4-0ae3-43a2-b982-f947fab7de4d"",
            ""actions"": [
                {
                    ""name"": ""Select Item"",
                    ""type"": ""Value"",
                    ""id"": ""020e4bf6-c4c9-46f3-9aa9-fe2e8aa36fc3"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Place/Interact Item"",
                    ""type"": ""Button"",
                    ""id"": ""f6706464-599b-4df2-8a1b-014df48cbeb4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Toggle Inventory"",
                    ""type"": ""Button"",
                    ""id"": ""a33bd291-c784-47c3-a136-4884ded228ef"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pointer Hover"",
                    ""type"": ""Value"",
                    ""id"": ""b29b73c1-4ce5-4762-98be-cbe758dc21fd"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""907bb178-9181-4021-9819-56d5e1e06b26"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""New control scheme"",
                    ""action"": ""Select Item"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""00340d3f-9508-4360-935f-7e8a58b2524d"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""New control scheme"",
                    ""action"": ""Place/Interact Item"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3145f550-9818-4b95-855d-086a11d67d7d"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""New control scheme"",
                    ""action"": ""Toggle Inventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4ac5e61e-089a-4a5c-8950-7f7292dd1f99"",
                    ""path"": ""<Pointer>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""New control scheme"",
                    ""action"": ""Pointer Hover"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""New control scheme"",
            ""bindingGroup"": ""New control scheme"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // GridMap
            m_GridMap = asset.FindActionMap("GridMap", throwIfNotFound: true);
            m_GridMap_SelectItem = m_GridMap.FindAction("Select Item", throwIfNotFound: true);
            m_GridMap_PlaceInteractItem = m_GridMap.FindAction("Place/Interact Item", throwIfNotFound: true);
            m_GridMap_ToggleInventory = m_GridMap.FindAction("Toggle Inventory", throwIfNotFound: true);
            m_GridMap_PointerHover = m_GridMap.FindAction("Pointer Hover", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // GridMap
        private readonly InputActionMap m_GridMap;
        private List<IGridMapActions> m_GridMapActionsCallbackInterfaces = new List<IGridMapActions>();
        private readonly InputAction m_GridMap_SelectItem;
        private readonly InputAction m_GridMap_PlaceInteractItem;
        private readonly InputAction m_GridMap_ToggleInventory;
        private readonly InputAction m_GridMap_PointerHover;
        public struct GridMapActions
        {
            private @Controls m_Wrapper;
            public GridMapActions(@Controls wrapper) { m_Wrapper = wrapper; }
            public InputAction @SelectItem => m_Wrapper.m_GridMap_SelectItem;
            public InputAction @PlaceInteractItem => m_Wrapper.m_GridMap_PlaceInteractItem;
            public InputAction @ToggleInventory => m_Wrapper.m_GridMap_ToggleInventory;
            public InputAction @PointerHover => m_Wrapper.m_GridMap_PointerHover;
            public InputActionMap Get() { return m_Wrapper.m_GridMap; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(GridMapActions set) { return set.Get(); }
            public void AddCallbacks(IGridMapActions instance)
            {
                if (instance == null || m_Wrapper.m_GridMapActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_GridMapActionsCallbackInterfaces.Add(instance);
                @SelectItem.started += instance.OnSelectItem;
                @SelectItem.performed += instance.OnSelectItem;
                @SelectItem.canceled += instance.OnSelectItem;
                @PlaceInteractItem.started += instance.OnPlaceInteractItem;
                @PlaceInteractItem.performed += instance.OnPlaceInteractItem;
                @PlaceInteractItem.canceled += instance.OnPlaceInteractItem;
                @ToggleInventory.started += instance.OnToggleInventory;
                @ToggleInventory.performed += instance.OnToggleInventory;
                @ToggleInventory.canceled += instance.OnToggleInventory;
                @PointerHover.started += instance.OnPointerHover;
                @PointerHover.performed += instance.OnPointerHover;
                @PointerHover.canceled += instance.OnPointerHover;
            }

            private void UnregisterCallbacks(IGridMapActions instance)
            {
                @SelectItem.started -= instance.OnSelectItem;
                @SelectItem.performed -= instance.OnSelectItem;
                @SelectItem.canceled -= instance.OnSelectItem;
                @PlaceInteractItem.started -= instance.OnPlaceInteractItem;
                @PlaceInteractItem.performed -= instance.OnPlaceInteractItem;
                @PlaceInteractItem.canceled -= instance.OnPlaceInteractItem;
                @ToggleInventory.started -= instance.OnToggleInventory;
                @ToggleInventory.performed -= instance.OnToggleInventory;
                @ToggleInventory.canceled -= instance.OnToggleInventory;
                @PointerHover.started -= instance.OnPointerHover;
                @PointerHover.performed -= instance.OnPointerHover;
                @PointerHover.canceled -= instance.OnPointerHover;
            }

            public void RemoveCallbacks(IGridMapActions instance)
            {
                if (m_Wrapper.m_GridMapActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IGridMapActions instance)
            {
                foreach (var item in m_Wrapper.m_GridMapActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_GridMapActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public GridMapActions @GridMap => new GridMapActions(this);
        private int m_NewcontrolschemeSchemeIndex = -1;
        public InputControlScheme NewcontrolschemeScheme
        {
            get
            {
                if (m_NewcontrolschemeSchemeIndex == -1) m_NewcontrolschemeSchemeIndex = asset.FindControlSchemeIndex("New control scheme");
                return asset.controlSchemes[m_NewcontrolschemeSchemeIndex];
            }
        }
        public interface IGridMapActions
        {
            void OnSelectItem(InputAction.CallbackContext context);
            void OnPlaceInteractItem(InputAction.CallbackContext context);
            void OnToggleInventory(InputAction.CallbackContext context);
            void OnPointerHover(InputAction.CallbackContext context);
        }
    }
}
